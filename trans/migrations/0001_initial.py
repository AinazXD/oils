# Generated by Django 5.0.7 on 2025-02-08 10:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BoosterPump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название насоса')),
                ('flow_rate', models.FloatField(verbose_name='Производительность (м³/ч)')),
                ('head', models.FloatField(verbose_name='Напор (м)')),
                ('power', models.FloatField(verbose_name='Мощность (кВт)')),
                ('efficiency', models.FloatField(default=70, verbose_name='КПД (%)')),
                ('max_temperature', models.FloatField(default=373, verbose_name='Максимальная температура (К)')),
                ('material', models.CharField(default='Нержавеющая сталь', max_length=255, verbose_name='Материал корпуса')),
                ('fluid_type', models.CharField(default='Вода', max_length=255, verbose_name='Тип перекачиваемой жидкости')),
            ],
        ),
        migrations.CreateModel(
            name='MainPump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название насоса')),
                ('pump_type', models.CharField(choices=[('sectional', 'Секционный многоступенчатый'), ('spiral', 'Спиральный одноступенчатый')], max_length=20, verbose_name='Тип насоса')),
                ('flow_rate', models.FloatField(verbose_name='Производительность (м³/ч)')),
                ('head_per_stage', models.FloatField(verbose_name='Напор на ступень (м)')),
                ('max_stages', models.IntegerField(default=1, verbose_name='Максимальное количество ступеней')),
                ('power_per_stage', models.FloatField(verbose_name='Мощность на ступень (кВт)')),
                ('efficiency', models.FloatField(default=80, verbose_name='КПД (%)')),
                ('max_temperature', models.FloatField(default=373, verbose_name='Максимальная температура (К)')),
                ('material', models.CharField(default='Нержавеющая сталь', max_length=255, verbose_name='Материал корпуса')),
                ('fluid_type', models.CharField(default='Вода', max_length=255, verbose_name='Тип перекачиваемой жидкости')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('ProductID', models.AutoField(primary_key=True, serialize=False, verbose_name='Уникальный идентификатор продукта')),
                ('Name', models.CharField(max_length=100, verbose_name='Название продукта')),
                ('Density293', models.FloatField(verbose_name='Плотность при 293К (кг/м³)')),
                ('Viscosity273', models.FloatField(verbose_name='Вязкость при 273К (мм²/с)')),
                ('Viscosity293', models.FloatField(verbose_name='Вязкость при 293К (мм²/с)')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('surname', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('name', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('patronymic', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('role', models.CharField(choices=[('engineer', 'Engineer'), ('admin', 'Admin')], default='engineer', max_length=10, verbose_name='Роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('PipelineID', models.AutoField(primary_key=True, serialize=False, verbose_name='Уникальный идентификатор трубопровода')),
                ('Diameter', models.FloatField(verbose_name='Внутренний диаметр трубопровода (мм)')),
                ('Length', models.FloatField(verbose_name='Длина трубопровода (км)')),
                ('ElevationDifference', models.FloatField(verbose_name='Разность нивелирных высот (м)')),
                ('ResidualHead', models.FloatField(verbose_name='Остаточный напор (м)')),
                ('Temperature', models.FloatField(verbose_name='Расчетная температура (К)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pipelines', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='Transportation',
            fields=[
                ('TransportationID', models.AutoField(primary_key=True, serialize=False, verbose_name='Уникальный идентификатор перевозки')),
                ('Quantity', models.FloatField(verbose_name='Количество перевозимого продукта (млн.т/год)')),
                ('Percentage', models.FloatField(verbose_name='Процентное содержание продукта в перевозке')),
                ('PipelineID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trans.pipeline', verbose_name='Трубопровод')),
                ('ProductID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trans.product', verbose_name='Продукт')),
            ],
        ),
    ]
